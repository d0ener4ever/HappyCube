/**
 * Face Animation Bitmaps and Functions
 * 
 * This module defines precomputed bitmaps for different eye states
 * and handles drawing animated eyes on the display.
 * 
 * Author: Lukas Bochnick
 */

#include "FaceAnimation.h"
#include "Display.h"
#include <Arduino.h>
#include <avr/pgmspace.h>


/**
 * Precomputed 32Ã—32 eye bitmaps stored in PROGMEM.
 * Each array represents an eye state with a specific pupil position.
 * The bitmaps are defined using a 4-byte wide format (128 bytes total).
 * Each byte represents 8 horizontal pixels, with 1 = white and 0 = black.
 *
 * The pupil shifts horizontally across different arrays to simulate eye movement.
 * 
 * - `openEyeBitmap_neg4` to `openEyeBitmap_4`: Open eye with the pupil shifting from left (-4) to right (+4).
 * - `closedEyeBitmap`: A closed eye (blinking state), represented by a black stripe in the middle.
 */

const uint8_t openEyeBitmap_neg4[128] PROGMEM = {
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0x00,0xFF,0xFF,
  0xFF,0x00,0xFF,0xFF,
  0xFF,0x00,0xFF,0xFF,
  0xFF,0x00,0xFF,0xFF,
  0xFF,0x00,0xFF,0xFF, 
  0xFF,0x00,0xFF,0xFF,
  0xFF,0x00,0xFF,0xFF,
  0xFF,0x00,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF
};

const uint8_t openEyeBitmap_neg3[128] PROGMEM = {
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0x80,0x7F,0xFF,  
  0xFF,0x80,0x7F,0xFF,  
  0xFF,0x80,0x7F,0xFF,  
  0xFF,0x80,0x7F,0xFF,  
  0xFF,0x80,0x7F,0xFF,  
  0xFF,0x80,0x7F,0xFF,  
  0xFF,0x80,0x7F,0xFF,  
  0xFF,0x80,0x7F,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF
};

const uint8_t openEyeBitmap_neg2[128] PROGMEM = {
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xC0,0x3F,0xFF,  
  0xFF,0xC0,0x3F,0xFF,  
  0xFF,0xC0,0x3F,0xFF,  
  0xFF,0xC0,0x3F,0xFF,  
  0xFF,0xC0,0x3F,0xFF,  
  0xFF,0xC0,0x3F,0xFF,  
  0xFF,0xC0,0x3F,0xFF,  
  0xFF,0xC0,0x3F,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF
};

const uint8_t openEyeBitmap_neg1[128] PROGMEM = {
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xE0,0x1F,0xFF,  
  0xFF,0xE0,0x1F,0xFF,  
  0xFF,0xE0,0x1F,0xFF,  
  0xFF,0xE0,0x1F,0xFF,  
  0xFF,0xE0,0x1F,0xFF,  
  0xFF,0xE0,0x1F,0xFF,  
  0xFF,0xE0,0x1F,0xFF,  
  0xFF,0xE0,0x1F,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF
};

const uint8_t openEyeBitmap_0[128] PROGMEM = {
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xF0,0x0F,0xFF,  
  0xFF,0xF0,0x0F,0xFF,  
  0xFF,0xF0,0x0F,0xFF,  
  0xFF,0xF0,0x0F,0xFF,  
  0xFF,0xF0,0x0F,0xFF,  
  0xFF,0xF0,0x0F,0xFF,  
  0xFF,0xF0,0x0F,0xFF,  
  0xFF,0xF0,0x0F,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF
};

const uint8_t openEyeBitmap_1[128] PROGMEM = {
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xF8,0x07,0xFF,  
  0xFF,0xF8,0x07,0xFF,  
  0xFF,0xF8,0x07,0xFF,  
  0xFF,0xF8,0x07,0xFF,  
  0xFF,0xF8,0x07,0xFF,  
  0xFF,0xF8,0x07,0xFF,  
  0xFF,0xF8,0x07,0xFF,  
  0xFF,0xF8,0x07,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF
};

const uint8_t openEyeBitmap_2[128] PROGMEM = {
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFC,0x03,0xFF,  
  0xFF,0xFC,0x03,0xFF,  
  0xFF,0xFC,0x03,0xFF,  
  0xFF,0xFC,0x03,0xFF,  
  0xFF,0xFC,0x03,0xFF,  
  0xFF,0xFC,0x03,0xFF,  
  0xFF,0xFC,0x03,0xFF,  
  0xFF,0xFC,0x03,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF
};

const uint8_t openEyeBitmap_3[128] PROGMEM = {
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFE,0x01,0xFF,  
  0xFF,0xFE,0x01,0xFF,  
  0xFF,0xFE,0x01,0xFF,  
  0xFF,0xFE,0x01,0xFF,  
  0xFF,0xFE,0x01,0xFF,  
  0xFF,0xFE,0x01,0xFF,  
  0xFF,0xFE,0x01,0xFF,  
  0xFF,0xFE,0x01,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF
};

const uint8_t openEyeBitmap_4[128] PROGMEM = {
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0x00,0xFF,  
  0xFF,0xFF,0x00,0xFF,  
  0xFF,0xFF,0x00,0xFF,  
  0xFF,0xFF,0x00,0xFF,  
  0xFF,0xFF,0x00,0xFF,  
  0xFF,0xFF,0x00,0xFF,  
  0xFF,0xFF,0x00,0xFF,  
  0xFF,0xFF,0x00,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF,  
  0xFF,0xFF,0xFF,0xFF
};

const uint8_t closedEyeBitmap[128] PROGMEM = {
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF
};

// --- Global Variables for Pupil Movement and Blinking ---
static int pupilOffset = 0;       // Current horizontal pupil offset (-4 to 4)
static int pupilDirection = 1;    // Direction of pupil movement (1 = right, -1 = left)
static uint16_t blinkTimer = 0;   // Timer for blinking sequence
static bool eyesOpen = true;      // Eye state: true = open, false = closed

/**
 * Returns a pointer to the appropriate open eye bitmap 
 * based on the current pupil offset.
 * This allows the animation to adjust dynamically as the pupil moves.
 */
static const uint8_t* getOpenEyeBitmap(int offset) {
  switch (offset) {
    case -4: return openEyeBitmap_neg4;
    case -3: return openEyeBitmap_neg3;
    case -2: return openEyeBitmap_neg2;
    case -1: return openEyeBitmap_neg1;
    case 0:  return openEyeBitmap_0;
    case 1:  return openEyeBitmap_1;
    case 2:  return openEyeBitmap_2;
    case 3:  return openEyeBitmap_3;
    case 4:  return openEyeBitmap_4;
    default: return openEyeBitmap_0;  // Default to centered pupil
  }
}

// --- Face Animation Functions ---

void drawFace(const FaceAnimation &fa) {
  if (eyesOpen) {
    // Select the correct open eye bitmap based on pupil offset
    const uint8_t* eyeBitmap = getOpenEyeBitmap(pupilOffset);
    displayBitmap(fa.x,      fa.y,      fa.x + 32 - 1, fa.y + 32 - 1, eyeBitmap);
    displayBitmap(fa.x + 36, fa.y,      fa.x + 36 + 32 - 1, fa.y + 32 - 1, eyeBitmap);
  } else {
    // Use the closed eye bitmap for blinking
    displayBitmap(fa.x,      fa.y,      fa.x + 32 - 1, fa.y + 32 - 1, closedEyeBitmap);
    displayBitmap(fa.x + 36, fa.y,      fa.x + 36 + 32 - 1, fa.y + 32 - 1, closedEyeBitmap);
  }
}

void updateFacePosition(FaceAnimation &fa) {
  // Update face position
  fa.x += fa.dx;
  fa.y += fa.dy;
  
  // Keep face within display bounds (128Ã—64 screen, face ~68Ã—32 pixels)
  if (fa.x < 0) {
    fa.x = 0;
    fa.dx = -fa.dx;  // Reverse direction
  }
  if (fa.x > 128 - 68) {
    fa.x = 128 - 68;
    fa.dx = -fa.dx;
  }
  if (fa.y < 0) {
    fa.y = 0;
    fa.dy = -fa.dy;
  }
  if (fa.y > 64 - 32) {
    fa.y = 64 - 32;
    fa.dy = -fa.dy;
  }
  
  // Update pupil movement: oscillates between -4 and +4
  pupilOffset += pupilDirection;
  if (pupilOffset > 4 || pupilOffset < -4) {
    pupilDirection = -pupilDirection;  // Reverse movement direction
  }
  
  // Update blinking behavior:
  // - When eyes are open: Randomly trigger a blink (1 in 200 chance).
  // - When blinking: Keep eyes closed for about 3 updates.
  blinkTimer++;
  if (eyesOpen) {
    if (random(0, 200) == 0) {
      eyesOpen = false;
      blinkTimer = 0;
    }
  } else {
    if (blinkTimer > 3) {
      eyesOpen = true;
      blinkTimer = 0;
    }
  }
}

